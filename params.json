{
  "name": "Swarm",
  "tagline": "A simple class to handle drawing \"swarms\" ~ brownian motion / orbiting particles ~ on an HTML canvas element.",
  "body": "swarm.js\r\n========\r\n\r\nswarm.js is a tool for rendering swarm-like behaviour on an html canvas element. The system can be thought of as a set of particles subject to brownian motion\r\nwith added consideration for momentum as well as gravity about a certain point, or set of points. The agents (i.e. insects/gnats) comprising each swarm are not aware of each other,\r\nbut can be made aware of the cursor location. Their position should be manipulated by way of setting the gravitational center(s), this way they will maintain their\r\norganic looking motion.\r\n\r\nExamples: http://somatostat.in/swarmSandbox.html\r\n\r\n## Usage\r\n\r\n\r\nThe constructor must take a canvas context as the argument. This will produce a swarm of 100 agents (insects, gnats, call them whatever you like), with default attributes.\r\n\r\n    var canvas = document.getElementById('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var swarm = new Swarm(context);\r\n\r\nIn order to render it, you need to set up an animation loop, this can be done with something like requestAnimationFrame(), setInterval(), or d3.timer(). This has been left exposed so that you can\r\nsynchronize your animation between multiple swarms or other drawing operations.\r\n\r\n    var animate = function(){\r\n        swarm.nextIteration(cursorX,cursorY);\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    animate();\r\n\r\n\r\nIf you don't care about interacting with the cursor, just pass in a large number as if the cursor was very far away:\r\n\r\n    var animate = function(){\r\n        swarm.nextIteration(10000,10000);\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    animate();\r\n\r\n\r\nTry messing with the physical parameters (gravity, friction, randomness) of the swarm to see understand the effects; generally choose values that are positive and within [0,1].\r\nAll values are normalized with respect to the context's size. So setting\r\n\r\n    swarm.centroids = [[0.5, 0.5]];\r\n\r\nwill cause the insects to be centered around the center of the screen.\r\n\r\nDepending on how you set the parameters, these guys can start to look a lot like a swarm of gnats!\r\n\r\n\r\n\r\n## Advanced Usage\r\n\r\nThe swarm is made of an array of 'insects', which are constructed like this\r\n\r\n    var Insect = function(xloc,yloc,xvel,yvel,centroid){\r\n\r\n        this.xloc = xloc;\r\n        this.yloc = yloc;\r\n        this.xvel = xvel;\r\n        this.yvel = yvel;\r\n        this.children = [];\r\n        this.centroid = centroid;\r\n\r\n    }\r\n\r\nThese are made by default, if not specified in the Swarm constructor.\r\n\r\nWe can manually remove and add two insects at a time with:\r\n\r\n    swarm.addMember();\r\n    swarm.sacrificeMember();\r\n\r\nAlso we can make every agent have a 'child' that will follow them around, and correspondingly get rid of them:\r\n\r\n    swarm.spawnYouth();\r\n    swarm.purgeYouth();\r\n\r\nThe 'centroids' property is an array. If you populate that array, the swarm can do some cool stuff based on the locations of the centroids.\r\n\r\n    swarm.centroids = [[0.3,0.3], [0.3,0.4], [0.3,0.5], [0.3,0.6],\r\n                       [0.3,0.7], [0.4,0.7], [0.5,0.7], [0.6,0.7],\r\n                       [0.7,0.7], [0.7,0.6], [0.7,0.5], [0.7,0.4],\r\n                       [0.7,0.3], [0.6,0.3], [0.5,0.3], [0.4,0.3]]\r\n\r\nAbove the centroids are set to the outline of a 5 x 5 square.\r\n\r\n    // spread the swarm evenly between the centroids\r\n\r\n    swarm.equalize();\r\n\r\n    //make each agent to continually calculate the nearest centroid and set that to be theirs:\r\n\r\n    swarm.currentMode = SWARM_DYNAMIC_CENTROIDS;\r\n\r\nNow the agents will migrate between the centroids if they are close enough.\r\nDynamic centroid mode is computationally intensive, but it looks cool. A grid system is on the to-do list to help deal with this.\r\n\r\n\r\n\r\nThat's it!\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}